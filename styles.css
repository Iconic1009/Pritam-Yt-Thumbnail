// script.js
document.addEventListener('DOMContentLoaded', function() {
    // Theme toggle functionality
    const themeToggle = document.getElementById('theme-toggle');
    const html = document.documentElement;
    
    // Check for saved theme preference or use preferred color scheme
    const savedTheme = localStorage.getItem('theme') || 
                       (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    html.setAttribute('data-theme', savedTheme);
    updateThemeIcon(savedTheme);
    
    themeToggle.addEventListener('click', () => {
        const currentTheme = html.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        html.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeIcon(newTheme);
    });
    
    function updateThemeIcon(theme) {
        const icon = themeToggle.querySelector('i');
        icon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
    }
    
    // Set current year in footer
    document.getElementById('current-year').textContent = new Date().getFullYear();
    
    const downloadBtn = document.getElementById('download-btn');
    const youtubeUrlInput = document.getElementById('youtube-url');
    const resultsSection = document.getElementById('results');
    const thumbnailsContainer = document.querySelector('.thumbnails-container');
    const clearResultsBtn = document.getElementById('clear-results');
    
    downloadBtn.addEventListener('click', fetchThumbnails);
    youtubeUrlInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            fetchThumbnails();
        }
    });
    clearResultsBtn.addEventListener('click', clearResults);
    
    function fetchThumbnails() {
        const youtubeUrl = youtubeUrlInput.value.trim();
        
        if (!youtubeUrl) {
            showError('Please enter a YouTube URL');
            return;
        }
        
        const videoId = extractVideoId(youtubeUrl);
        
        if (!videoId) {
            showError('Invalid YouTube URL. Please check and try again.');
            return;
        }
        
        showLoading(true);
        clearResults();
        
        // Generate all thumbnail resolutions
        const thumbnails = [
            { resolution: 'Max Resolution', url: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg` },
            { resolution: 'High Quality', url: `https://img.youtube.com/vi/${videoId}/hqdefault.jpg` },
            { resolution: 'Medium Quality', url: `https://img.youtube.com/vi/${videoId}/mqdefault.jpg` },
            { resolution: 'Standard Quality', url: `https://img.youtube.com/vi/${videoId}/sddefault.jpg` },
            { resolution: 'Default', url: `https://img.youtube.com/vi/${videoId}/default.jpg` },
            { resolution: 'Start (1st frame)', url: `https://img.youtube.com/vi/${videoId}/1.jpg` },
            { resolution: 'Middle (2nd frame)', url: `https://img.youtube.com/vi/${videoId}/2.jpg` },
            { resolution: 'End (3rd frame)', url: `https://img.youtube.com/vi/${videoId}/3.jpg` }
        ];
        
        // Check which thumbnails actually exist
        checkThumbnailsExist(thumbnails, videoId).then(availableThumbnails => {
            showLoading(false);
            
            if (availableThumbnails.length === 0) {
                showError('No thumbnails available for this video. It may be private or deleted.');
                return;
            }
            
            displayThumbnails(availableThumbnails);
        }).catch(error => {
            showLoading(false);
            showError('Error fetching thumbnails. Please try again.');
            console.error('Error:', error);
        });
    }
    
    function extractVideoId(url) {
        // Regular expressions to match various YouTube URL formats
        const patterns = [
            /^.*(?:youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]{11}).*/, // Standard URLs
            /^.*(?:youtube.com\/shorts\/)([^#&?]{11}).*/, // YouTube Shorts
            /^.*(?:youtube.com\/live\/)([^#&?]{11}).*/, // YouTube Live
            /^.*(?:youtu.be\/)([^#&?]{11}).*/, // Shortened youtu.be URLs
            /^.*(?:youtube.com\/playlist\?list=.*&v=)([^#&?]{11}).*/, // Playlist URLs with video ID
            /^([^#&?]{11})$/, // Just the video ID itself
            /^.*(?:youtube.com\/attribution_link\?.*v%3D([^#&?]{11})).*/ // Attribution links
        ];
        
        for (const pattern of patterns) {
            const match = url.match(pattern);
            if (match && match[1]) {
                return match[1];
            }
        }
        
        return null;
    }
    
    async function checkThumbnailsExist(thumbnails, videoId) {
        const checks = thumbnails.map(async thumbnail => {
            try {
                const exists = await checkImageExists(thumbnail.url);
                if (exists) {
                    return thumbnail;
                }
                return null;
            } catch {
                return null;
            }
        });
        
        const results = await Promise.all(checks);
        return results.filter(thumbnail => thumbnail !== null);
    }
    
    function checkImageExists(url) {
        return new Promise((resolve) => {
            const img = new Image();
            img.onload = () => resolve(true);
            img.onerror = () => resolve(false);
            img.src = url;
        });
    }
    
    function displayThumbnails(thumbnails) {
        thumbnailsContainer.innerHTML = '';
        
        thumbnails.forEach(thumbnail => {
            const thumbnailCard = document.createElement('div');
            thumbnailCard.className = 'thumbnail-card';
            
            const img = document.createElement('img');
            img.src = thumbnail.url;
            img.alt = `YouTube thumbnail - ${thumbnail.resolution}`;
            img.loading = 'lazy';
            
            const resolution = document.createElement('p');
            resolution.textContent = thumbnail.resolution;
            
            const downloadBtn = document.createElement('a');
            downloadBtn.href = thumbnail.url;
            downloadBtn.download = `yt-thumbnail-${extractVideoId(youtubeUrlInput.value)}-${thumbnail.resolution.toLowerCase().replace(' ', '-')}.jpg`;
            downloadBtn.className = 'download-link';
            downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download';
            
            thumbnailCard.appendChild(img);
            thumbnailCard.appendChild(resolution);
            thumbnailCard.appendChild(downloadBtn);
            thumbnailsContainer.appendChild(thumbnailCard);
        });
        
        resultsSection.classList.remove('hidden');
    }
    
    function clearResults() {
        thumbnailsContainer.innerHTML = '';
        resultsSection.classList.add('hidden');
    }
    
    function showLoading(show) {
        const btnText = document.getElementById('btn-text');
        const btnLoader = document.getElementById('btn-loader');
        
        if (show) {
            downloadBtn.disabled = true;
            btnText.textContent = 'Processing...';
            btnLoader.classList.remove('hidden');
        } else {
            downloadBtn.disabled = false;
            btnText.textContent = 'Get Thumbnails';
            btnLoader.classList.add('hidden');
        }
    }
    
    function showError(message) {
        // Remove any existing error messages
        const existingError = document.querySelector('.error-message');
        if (existingError) {
            existingError.remove();
        }
        
        // Create and display new error message
        const errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        errorElement.textContent = message;
        
        const heroContent = document.querySelector('.hero-content');
        heroContent.appendChild(errorElement);
        
        // Remove error after 5 seconds
        setTimeout(() => {
            errorElement.remove();
        }, 5000);
    }
});
        
